package ui;

import java.awt.CardLayout;
import java.beans.PropertyChangeEvent;
import mod.GameLogic;
import mod.GameLogic.Stage;
import mod.Player;

public class MainFrame extends javax.swing.JFrame {

    public MainFrame() {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        
        pnlSetup.addPropertyChangeListener(SetupPanel.PROP_PLAYERS_CHANGED, (PropertyChangeEvent evt) -> 
        {
            btnOK.setEnabled((int) evt.getNewValue() > 1);
        });
        
        GameLogic.getInstance().setStageListener((PropertyChangeEvent evt) -> 
        {
            if (GameLogic.PROP_STAGE_CHANGED.equals(evt.getPropertyName())) 
            {
                Stage stage = (Stage) evt.getNewValue();
                switch (stage)
                {
                    case SETUP:
                    {
                        GameLogic.getInstance().getPlayers().forEach((player) -> player.applyCombo());
                        pnlSetup.updateView();
                        ((CardLayout) pnlView.getLayout()).show(pnlView, "setup");
                        break;
                    }
                    case ROUND1:
                    case ROUND2:
                    case ROUND3:
                    {
                        ((CardLayout) pnlView.getLayout()).show(pnlView, "event");
                        break;
                    }
                    case HARVEST1:
                    case HARVEST2:
                    case HARVEST3:
                    {
                        GameLogic.getInstance().setCurrEvent(pnlEvent.getSelectedEvent());
                        isHarvesting();
                        break;
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pnlView = new javax.swing.JPanel();
        pnlSetup = new ui.SetupPanel();
        pnlEvent = new ui.EventPanel();
        pnlHarvesting = new javax.swing.JPanel();
        pnlControls = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("[GGJ 2023] Pottage: The Root Harvesting");
        setPreferredSize(new java.awt.Dimension(800, 600));

        pnlView.setLayout(new java.awt.CardLayout());
        pnlView.add(pnlSetup, "setup");
        pnlView.add(pnlEvent, "event");

        pnlHarvesting.setLayout(new java.awt.BorderLayout());
        pnlView.add(pnlHarvesting, "harvest");

        jScrollPane1.setViewportView(pnlView);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pnlControls.setLayout(new java.awt.BorderLayout());

        btnOK.setText("OK");
        btnOK.setEnabled(false);
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        pnlControls.add(btnOK, java.awt.BorderLayout.LINE_END);

        getContentPane().add(pnlControls, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        if (isHarvesting() == false)
        {
            GameLogic.getInstance().nextStage();
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private boolean isHarvesting()
    {
        if (pnlHarvesting.getComponentCount() > 0)
        {
            ((HarvestPanel) pnlHarvesting.getComponent(0)).applyPoints();
            pnlHarvesting.removeAll();
        }
        
        switch (GameLogic.getInstance().getStage())
        {
            case HARVEST1:
            case HARVEST2:
            case HARVEST3:
            {
                Player harvester = GameLogic.getInstance().getHarvestingPlayer();
                
                if (harvester != null)
                {
                    HarvestPanel p = new HarvestPanel(harvester);
                    pnlHarvesting.add(p);
                    pnlHarvesting.revalidate();
                    
                    ((CardLayout) pnlView.getLayout()).show(pnlView, "harvest");
                    return true;
                }
            }
        }
        
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlControls;
    private ui.EventPanel pnlEvent;
    private javax.swing.JPanel pnlHarvesting;
    private ui.SetupPanel pnlSetup;
    private javax.swing.JPanel pnlView;
    // End of variables declaration//GEN-END:variables
}
